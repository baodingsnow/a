# 准备工作

操作数据库方式的一种，比mybatis更方便，注入jdbc依赖后， sql写在dao层就可以

一般都是在方法中写入sql

## 引入依赖

spring-boot-starter-jdbc：

```java
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-jdbc</artifactId>
</dependency>
```

## 代码编写

dao层  

以增加功能为例



```java
    @Override
    public int add(Student student) {
        String sql = "insert into student(sno,sname,ssex) values(:sno,:name,:sex)";
        NamedParameterJdbcTemplate npjt = new NamedParameterJdbcTemplate(this.jdbcTemplate.getDataSource());
        return npjt.update(sql, new BeanPropertySqlParameterSource(student));
    }

   @Override
    public List<Map<String, Object>> queryStudentsListMap() {
        String sql = "select * from student";
        return this.jdbcTemplate.queryForList(sql);
    }
```



> 在引入`spring-boot-starter-jdbc`驱动后，可直接在类中注入JdbcTemplate。由上面代码可发现，对于保存操作有两种不同的方法，当插入的表字段较多的情况下，推荐使用`NamedParameterJdbcTemplate`。
>
> 对于返回结果，可以直接使用`List<Map<String, Object>>`来接收，这也是个人比较推荐使用的方式，毕竟比较简单方便；也可以使用库表对应的实体对象来接收，不过这时候我们就需要手动创建一个实现了`org.springframework.jdbc.core.RowMapper`的对象，用于将实体对象属性和库表字段一一对应：



### NamedParameterJdbcTemplate常用方法总结

```汉语
NamedParameterJdbcTemplate类拓展了JdbcTemplate类，对JdbcTemplate类进行了封装从而支持命名参数特性。
NamedParameterJdbcTemplate主要提供以下三类方法：execute方法、query及queryForXXX方法、update及batchUpdate方法。
只看了update方法   可以实现增 改两个功能 
```

### 2.插入/修改/删除数据,使用updateXXX方法

实例

```java
StudentDTO dto=new StudentDTO();//这个DTO为传入数据
dto.setId(UUID.randomUUID().toString());
dto.setName("小红");
dto.setHomeAddress("成都");
//------------------------------
template.update("insert into student(id,name,home_address) values (:id,:name,:homeAddress)",
                new BeanPropertySqlParameterSource(dto));
```

